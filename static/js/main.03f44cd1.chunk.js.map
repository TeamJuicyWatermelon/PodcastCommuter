{"version":3,"sources":["assets/walkingIcon.png","assets/watermelonBikeIcon.png","assets/watermelonfavicon.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","scrollToSearch","event","preventDefault","document","querySelector","scrollIntoView","behavior","block","handleChange","setState","target","name","value","console","log","displayMap","state","from","to","map","type","axios","url","method","responseType","params","key","routeType","unit","then","response","data","route","commuteTimeSec","realTime","commuteTimeMin","roundedTime","Math","round","isMapShown","getPodcasts","transportationType","minLen","maxLen","bicycle","pedestrian","headers","q","genre_ids","podcastGenre","language","len_min","len_max","results","podcasts","catch","err","displayChosenPodcast","podcast","isPodcastShown","chosenPodcast","genre","minTime","maxTime","this","mapImage","className","src","watermelonfavicon","alt","onClick","action","htmlFor","onChange","placeholder","id","defaultValue","disabled","watermelonBikeIcon","walkingIcon","podcast_title_original","image","publisher_original","audio_length_sec","href","link","audio","controls","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.03f44cd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/walkingIcon.f835e1f8.png\";","module.exports = __webpack_public_path__ + \"static/media/watermelonBikeIcon.f2c0260c.png\";","module.exports = __webpack_public_path__ + \"static/media/watermelonfavicon.0ce774d5.png\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport walkingIcon from \"./assets/walkingIcon.png\";\nimport watermelonBikeIcon from \"./assets/watermelonBikeIcon.png\";\nimport watermelonfavicon from \"./assets/watermelonfavicon.png\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      podcasts: [],\n      genre: \"\",\n      isPodcastShown: false,\n      chosenPodcast: \"\",\n      from: \"\",\n      to: \"\",\n      isMapShown: false,\n      minTime: \"\",\n      maxTime: \"\",\n      podcastGenre: \"\",\n    };\n  }\n\n  scrollToSearch = (event) => {\n    event.preventDefault();\n    const searchSection = document.querySelector(\".background1\");\n    searchSection.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"start\",\n    });\n  };\n\n  //Function to update user's input to current address state\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n    console.log(event.target.value)\n  };\n\n  //Function to display MAP and get commute time lengths for both route types\n  displayMap = (event) => {\n    event.preventDefault();\n\n    if (this.state.from !== \"\" && this.state.to !== \"\") {\n      const routeType = [\"bicycle\", \"pedestrian\"];\n      routeType.map((type) => {\n        return (\n          //Call Mapquest API to determine commute time\n          axios({\n            url: \"https://www.mapquestapi.com/directions/v2/route\",\n            method: \"GET\",\n            responseType: \"JSONP\",\n            params: {\n              key: \"EP7bQzAhNEdKJsfFtJeLQDYa3muNllNO\",\n              routeType: type,\n              from: this.state.from,\n              to: this.state.to,\n              unit: \"k\",\n            },\n          }).then((response) => {\n            console.log(response.data.route);\n            //get commute time in seconds\n            const commuteTimeSec = response.data.route.realTime;\n            //convert commute time to minutes\n            let commuteTimeMin = `${commuteTimeSec / 60}`;\n            let roundedTime = Math.round(commuteTimeMin);\n            // let roundedTime = commuteTimeMin;\n\n            // if (roundedTime > 60) {\n            //   let roundedTimeInHours = Math.round(roundedTime / 60);\n            //   // let roundedTimeInHours = roundedTime / 60;\n\n            //   console.log(type,roundedTimeInHours);\n            // }\n\n            this.setState({\n              isMapShown: true,\n              [type]: roundedTime,\n            });\n          })\n        );\n      });\n    }\n  };\n\n  //Function to call Poscast API\n  getPodcasts = (transportationType) => {\n    // commuteType is the argument from onClick funtions (choose route type section)\n    console.log(transportationType);\n    let minLen;\n    let maxLen;\n\n    if (transportationType === \"bicycle\") {\n      //set maximum and minimum podcast lengths to call Podcasts\n\n      minLen = this.state.bicycle;\n      maxLen = Math.round(this.state.bicycle * 1.1 + 1);\n      // minLen = this.state.bicycle - 1;\n      // maxLen = this.state.bicycle + 1;\n      // minLen = (this.state.bicycle * 0.9);\n      // maxLen = (this.state.bicycle * 1.1);\n      console.log(minLen, maxLen);\n    } else if (transportationType === \"pedestrian\") {\n      //set maximum and minimum podcast lengths to call Podcasts\n      minLen = this.state.pedestrian;\n      maxLen = Math.round(this.state.pedestrian * 1.1 + 1);\n      // minLen = 1;\n      // maxLen = 5;\n      console.log(minLen, maxLen);\n    }\n    //Call Podcast API\n    axios({\n      url: \"https://listen-api.listennotes.com/api/v2/search\",\n      method: \"GET\",\n      headers: { \"X-ListenAPI-Key\": \"ea2d65fb95fc4f59a943faa7a423b3ad\" },\n      responseType: \"JSON\",\n      params: {\n        q: \"podcast\",\n        genre_ids: this.state.podcastGenre,\n        type: \"episode\",\n        language: \"English\",\n        len_min: minLen,\n        len_max: maxLen,\n      },\n    })\n      .then((response) => {\n        response = response.data.results;\n        console.log(response);\n        this.setState({\n          podcasts: response,\n        });\n      })\n      .catch((err) => {\n        console.log(err); //ERROR HANDLING NEEDED HERE!!!\n      });\n  };\n\n  //----------------------------------\n  //Function to display chosen Postcast\n  displayChosenPodcast = (podcast) => {\n    // console.log(podcast);\n    this.setState({\n      isPodcastShown: true,\n      chosenPodcast: podcast,\n    });\n  };\n\n  render() {\n    const chosenPodcast = this.state.chosenPodcast;\n    //Assign the mapUrl to a variable\n    const mapImage = `https://www.mapquestapi.com/staticmap/v5/map?start=${this.state.from}&end=${this.state.to}&size=400,200@2x&key=GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl`;\n\n    return (\n      <div className=\"App\">\n        <div className=\"flexContainer\">\n          <header>\n            <div className=\"wrapper\">\n              <h1>Podcast Commuter</h1>\n              <div className=\"flexContainer\">\n                <p>\n                  <img src={watermelonfavicon} alt=\"watermelon\" />\n                  Your source for juicy podcasts on the go!\n                  <img src={watermelonfavicon} alt=\"watermelon\" />\n                </p>\n              </div>\n              <ul>\n                <li>How it works:</li>\n                <li>\n                  1. select a cateogory of podcast you're in the mood for!\n                </li>\n                <li>\n                  2. enter your starting address, followed by your destination.\n                </li>\n                <li>\n                  3. let us work some magic and populate the perfect, juciest,\n                  most time coordinated podcast just for you and your commute!\n                </li>\n              </ul>\n              <button className=\"startButton\" onClick={this.scrollToSearch}>\n                Let's get started!{\" \"}\n              </button>\n              {/* the below can go into a component (renders title, link, and image of podcast) */}\n              {/* <div className=\"podcast\">\n                <a href={this.state.podCast.audio}>\n                  {\" \"}\n                  <h2>{this.state.podCast.podcast_title_original}</h2>\n                  <img src={this.state.podCast.image} />\n                </a>\n              </div> */}\n              {/* the above can go into a component */}\n            </div>\n          </header>\n        </div>\n        <section className=\"background1\">\n          <div className=\"wrapper\">\n            <h2>\n              Tell us your starting address, where you're headed, and pick a\n              podcast genre!\n            </h2>\n            <form action=\"\">\n              <label htmlFor=\"\">Starting Address</label>\n              <input\n                value={this.state.from}\n                onChange={this.handleChange}\n                name=\"from\"\n                type=\"text\"\n                placeholder=\"Street, city, postal code\"\n              />\n\n              <label htmlFor=\"\">Destination</label>\n              <input\n                value={this.state.to}\n                onChange={this.handleChange}\n                name=\"to\"\n                type=\"text\"\n                placeholder=\"Street, city, postal code\"\n              />\n\n              <label htmlFor=\"podcastGenre\">Podcast genre</label>\n              <select\n                name=\"podcastGenre\"\n                id=\"podcastGenre\"\n                onChange={this.handleChange}\n              >\n                <option value=\"\" defaultValue disabled>\n                  Choose a podcast genre\n                </option>\n                <option value=\"144\">Personal Finance</option>\n                <option value=\"77\">Sports</option>\n                <option value=\"93\">Business</option>\n                <option value=\"111\">Education</option>\n                <option value=\"100\">Arts</option>\n                <option value=\"132\">Kids & Family</option>\n                <option value=\"122\">Society & Culture</option>\n                <option value=\"133\">Comedy</option>\n                <option value=\"168\">Fiction</option>\n                <option value=\"117\">Government</option>\n                <option value=\"88\">Health & Fitness</option>\n                <option value=\"125\">History</option>\n                <option value=\"82\">Leisure</option>\n                <option value=\"134\">Music</option>\n                <option value=\"99\">News</option>\n                <option value=\"69\">Religion & Spirituality</option>\n                <option value=\"107\">Science</option>\n                <option value=\"68\">TV & Film</option>\n                <option value=\"127\">Technology</option>\n                <option value=\"135\">True Crime</option>\n              </select>\n\n              <button onClick={this.displayMap}>LET'S GO!</button>\n            </form>\n          </div>\n        </section>\n        {/* part 3 */}\n        <section className=\"background2\">\n          <div className=\"wrapper\">\n            <h2>Choose your method of transportion</h2>\n\n            {/* Ternary operator to display Map */}\n            {this.state.isMapShown ? <img src={mapImage} alt=\"hello\" /> : null}\n\n            <div className=\"transportationMode\">\n              <div className=\"flexContainer2\">\n                <ul>\n                  <li>\n                    {\" \"}\n                    <button onClick={() => this.getPodcasts(\"bicycle\")}>\n                      <img\n                        src={watermelonBikeIcon}\n                        alt=\"Transportation via biking\"\n                      />\n                    </button>\n                  </li>\n                  <li>Bicycle Time: {this.state.bicycle} minutes</li>\n                </ul>\n                {/* will need to convert mins to hrs in case user's commute length is longer than 60 mins */}\n                <ul>\n                  <li>\n                    <button onClick={() => this.getPodcasts(\"pedestrian\")}>\n                      <img src={walkingIcon} alt=\"Transportation via walking\" />\n                    </button>\n                  </li>\n                  <li>Walking Time: {this.state.pedestrian} minutes</li>\n                </ul>\n\n                {/* will need to convert mins to hrs in case user's commute length is longer than 60 mins */}\n                {/* <p></p> */}\n              </div>\n            </div>\n          </div>\n        </section>\n        {/* part 4 */}\n        <section className=\"background3\">\n          <div id=\"here\" className=\"wrapper\">\n            <h2>Pick your podcast!</h2>\n            <ul className=\"podcastSection\">\n              <div className=\"flexContainer3\">\n                {/* Map out the state of 'podcasts' array */}\n                {this.state.podcasts.map((podcast) => {\n                  return (\n                    <li key={podcast.id}>\n                      <h2>{podcast.podcast_title_original}</h2>\n                      <img\n                        src={podcast.image}\n                        alt={podcast.podcast_title_original}\n                      />\n                      <p>Author: {podcast.publisher_original}</p>\n                      <p>Time: {podcast.audio_length_sec / 60} mins</p>\n                      {/* <p>Summary: {podcast.description_original}</p> */}\n                      <a href={podcast.link}>More Info</a>\n                      <button\n                        onClick={() => this.displayChosenPodcast(podcast)}\n                      >\n                        Choose\n                      </button>\n                    </li>\n                  );\n                })}\n              </div>\n            </ul>\n            {/* Ternary operator to display chosen podcast */}\n            {this.state.isPodcastShown ? (\n              <div key={chosenPodcast.id} className=\"chosenPodcast\">\n                <h2>{chosenPodcast.podcast_title_original}</h2>\n                <img\n                  src={chosenPodcast.image}\n                  alt={chosenPodcast.podcast_title_original}\n                />\n                <p>Author: {chosenPodcast.publisher_original}</p>\n                <a href={chosenPodcast.link}>More Info</a>\n                <button>Choose</button>\n                <audio src={chosenPodcast.audio} controls />\n              </div>\n            ) : null}\n          </div>\n        </section>\n        {/* <footer>\n          <p>enter our team members names and etc</p>\n        </footer> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}