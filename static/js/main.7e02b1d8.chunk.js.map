{"version":3,"sources":["assets/walkingIcon.png","assets/watermelonBikeIcon.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","scrollToSearch","event","preventDefault","console","log","document","querySelector","scrollIntoView","behavior","block","handleChange","setState","target","name","value","displayMap","state","from","to","map","type","axios","url","method","responseType","params","key","routeType","unit","then","response","data","route","commuteTimeSec","realTime","commuteTimeMin","roundedTime","Math","round","isMapShown","getPodcasts","transportationType","minLen","maxLen","bicycle","pedestrian","headers","q","genre_ids","podcastGenre","language","len_min","len_max","results","podcasts","catch","err","displayChosenPodcast","podcast","isPodcastShown","chosenPodcast","genre","minTime","maxTime","this","mapImage","className","onClick","action","htmlFor","onChange","placeholder","id","disabled","src","alt","watermelonBikeIcon","walkingIcon","podcast_title_original","image","publisher_original","audio_length_sec","description_original","href","link","audio","controls","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7e02b1d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/walkingIcon.f835e1f8.png\";","module.exports = __webpack_public_path__ + \"static/media/watermelonBikeIcon.f2c0260c.png\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport walkingIcon from \"./assets/walkingIcon.png\";\nimport watermelonBikeIcon from \"./assets/watermelonBikeIcon.png\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      podcasts: [],\n      genre: '',\n      isPodcastShown: false,\n      chosenPodcast: '',\n      from: '',\n      to: '',\n      isMapShown: false,\n      minTime: '',\n      maxTime: '',\n      podcastGenre: '',\n    };\n  }\n\n  scrollToSearch = (event) => {\n    event.preventDefault();\n    console.log(\"click\");\n    const searchSection = document.querySelector('.background1');\n    searchSection.scrollIntoView({\n      behavior: 'smooth',\n      block: 'start'\n    })\n  }\n\n  //Function to update user's input to current address state\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n//Function to display MAP and get commute time lengths for both route types\ndisplayMap = (event) => {\n  event.preventDefault();\n\n  if (this.state.from !== '' && this.state.to !== '') {\n\n    const routeType = ['bicycle', 'pedestrian'];\n    routeType.map(type => {\n      return (\n        //Call Mapquest API to determine commute time\n        axios({\n          url: 'http://www.mapquestapi.com/directions/v2/route',\n          method: 'GET',\n          responseType: 'JSONP',\n          params: {\n            key: 'EP7bQzAhNEdKJsfFtJeLQDYa3muNllNO',\n            routeType: type,\n            from: this.state.from,\n            to: this.state.to,\n            unit: \"k\", \n          }\n        }).then((response) => {\n          console.log(response.data.route);\n          //get commute time in seconds\n          const commuteTimeSec = response.data.route.realTime;\n          //convert commute time to minutes\n          let commuteTimeMin =`${commuteTimeSec / 60}`;\n          let roundedTime = Math.round(commuteTimeMin);\n          // let roundedTime = commuteTimeMin;\n\n\n          // if (roundedTime > 60) {\n          //   let roundedTimeInHours = Math.round(roundedTime / 60);\n          //   // let roundedTimeInHours = roundedTime / 60;\n\n          //   console.log(type,roundedTimeInHours);\n          // }\n\n          this.setState({\n            isMapShown: true,\n            [type]: roundedTime,\n          })\n\n        })\n      )\n    })   \n  }\n}\n\n//Function to call Poscast API\ngetPodcasts = (transportationType) => {\n  // commuteType is the argument from onClick funtions (choose route type section)\n  console.log(transportationType);\n  let minLen;\n  let maxLen;\n\n  if (transportationType === 'bicycle') {\n    //set maximum and minimum podcast lengths to call Podcasts\n\n     minLen = this.state.bicycle;\n     maxLen = Math.round((this.state.bicycle * 1.1) + 1);\n    // minLen = this.state.bicycle - 1;\n    // maxLen = this.state.bicycle + 1;\n    // minLen = (this.state.bicycle * 0.9);\n    // maxLen = (this.state.bicycle * 1.1);\n    console.log(minLen, maxLen);\n  } else if (transportationType === 'pedestrian') {\n    //set maximum and minimum podcast lengths to call Podcasts\n    minLen = this.state.pedestrian;\n    maxLen = Math.round((this.state.pedestrian * 1.1) + 1);\n    // minLen = 1;\n    // maxLen = 5;\n    console.log(minLen, maxLen);\n  }\n      //Call Podcast API\n      axios({\n        url: 'https://listen-api.listennotes.com/api/v2/search',\n        method: 'GET',\n        headers: { 'X-ListenAPI-Key': 'ea2d65fb95fc4f59a943faa7a423b3ad' },\n        responseType: 'JSON',\n        params: {\n          q: \"podcast\",\n          genre_ids: this.state.podcastGenre,\n          type: \"episode\",\n          language: \"English\",\n          len_min: minLen, \n          len_max: maxLen, \n        }\n      }).then((response) => {\n        response = response.data.results;\n        console.log(response);\n        this.setState({\n          podcasts: response,\n        })\n      }).catch((err) => {\n        console.log(err); //ERROR HANDLING NEEDED HERE!!!\n      }) \n}\n\n//----------------------------------\n//Function to display chosen Postcast\ndisplayChosenPodcast = (podcast) => {\n  // console.log(podcast);\n    this.setState({\n      isPodcastShown: true,\n      chosenPodcast: podcast,\n    })\n  }\n\n  render() {\n    const chosenPodcast = this.state.chosenPodcast;\n    //Assign the mapUrl to a variable\n    const mapImage = `https://www.mapquestapi.com/staticmap/v5/map?start=${this.state.from}&end=${this.state.to}&size=400,200@2x&key=GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl`;\n\n    return (\n      <div className=\"App\">\n        <div className=\"flexContainer\">\n          <header>\n            <div className=\"wrapper\">\n              <h1>Podcast Commuter</h1>\n              <p>Your source for juicy podcasts on the go!</p>\n              <ul>\n                <li>How it works:</li>\n                <li>\n                  1. select a cateogory of podcast you're in the mood for!\n                </li>\n                <li>\n                  2. enter your starting address, followed by your destination.\n                </li>\n                <li>\n                  3. let us work some magic and populate the perfect, juciest,\n                  most time coordinated podcast just for you and your commute!\n                </li>\n              </ul>\n              <button className=\"startButton\" onClick={this.scrollToSearch}>Let's get started! </button>\n              {/* the below can go into a component (renders title, link, and image of podcast) */}\n              {/* <div className=\"podcast\">\n                <a href={this.state.podCast.audio}>\n                  {\" \"}\n                  <h2>{this.state.podCast.podcast_title_original}</h2>\n                  <img src={this.state.podCast.image} />\n                </a>\n              </div> */}\n              {/* the above can go into a component */}\n            </div>\n          </header>\n        </div>\n        <section className=\"background1\">\n          <div className=\"wrapper\">\n            <h2>\n              Tell us your starting address, where you're headed, and pick a\n              podcast!\n            </h2>\n            <form action=\"\">\n              <label htmlFor=\"\">Starting Address</label>\n              <input\n              value={this.state.from} \n              onChange={this.handleChange}\n              name=\"from\"\n              type=\"text\" \n              placeholder=\"Street, city, postal code\" />\n\n              <label htmlFor=\"\">Destination</label>\n              <input \n              value={this.state.to}\n              onChange={this.handleChange}\n              name=\"to\"\n              type=\"text\" \n              placeholder=\"Street, city, postal code\" />\n\n              <label htmlFor=\"podcastGenre\">Podcast genre</label>\n              <select name=\"podcastGenre\" id=\"podcastGenre\" onChange={this.handleChange}>\n                <option disabled value=\"\">Choose a podcast category!</option>\n                <option value=\"144\">Personal Finance</option>\n                <option value=\"77\">Sports</option>  \n                <option value=\"93\">Business</option>\n                <option value=\"111\">Education</option>\n                <option value=\"100\">Arts</option>\n                <option value=\"132\">Kids & Family</option>\n                <option value=\"122\">Society & Culture</option>\n                <option value=\"133\">Comedy</option>\n                <option value=\"168\">Fiction</option>\n                <option value=\"117\">Government</option>\n                <option value=\"88\">Health & Fitness</option>\n                <option value=\"125\">History</option>\n                <option value=\"82\">Leisure</option>\n                <option value=\"134\">Music</option>\n                <option value=\"99\">News</option>\n                <option value=\"69\">Religion & Spirituality</option>\n                <option value=\"107\">Science</option>\n                <option value=\"68\">TV & Film</option>\n                <option value=\"127\">Technology</option>\n                <option value=\"135\">True Crime</option>\n              </select>\n\n              <button onClick={this.displayMap}>LET'S GO!</button>\n            </form>\n          </div>\n        </section>\n        {/* part 3 */}\n        <section className=\"background2\">\n          <div className=\"wrapper\">\n            <h2>\n              Choose your method of transportion, and we will show you your\n              route and podcast!\n            </h2>\n\n            {/* Ternary operator to display Map */}\n          {this.state.isMapShown ? \n          <img src={mapImage} alt=\"hello\"/>\n          : null\n          }\n\n            <div className=\"transportationMode\">\n              <a onClick={() => this.getPodcasts('bicycle')}>\n                <img src={watermelonBikeIcon} alt=\"Transportation via biking\" />\n              </a>\n              {/* will need to convert mins to hrs in case user's commute length is longer than 60 mins */}\n              <p>{this.state.bicycle} mins</p> \n\n              <a onClick={() => this.getPodcasts('pedestrian')}>\n                <img src={walkingIcon} alt=\"Transportation via walking\" />\n              </a>\n              {/* will need to convert mins to hrs in case user's commute length is longer than 60 mins */}\n              <p>{this.state.pedestrian} mins</p>\n            </div>\n          </div>\n        </section>\n        {/* part 4 */}\n        <section className=\"background3\">\n          <div id=\"here\" className=\"wrapper\">\n            <h2>Pick your podcast!</h2>\n            <ul className=\"podcastSection\">\n          {/* Map out the state of 'podcasts' array */}\n          {this.state.podcasts.map(podcast => {\n            return (\n              <li key={podcast.id}>\n                <h2>{podcast.podcast_title_original}</h2>\n                <img src={podcast.image} alt={podcast.podcast_title_original}/>\n                <p>Author: {podcast.publisher_original}</p>\n                <p>Time: {podcast.audio_length_sec / 60} mins</p>\n                <p>Description: {podcast.description_original}</p>\n                <a href={podcast.link}>More Info</a>\n                <button onClick={() => this.displayChosenPodcast(podcast)}>Choose</button>\n              </li>\n            )\n          })}\n        </ul>\n        {/* Ternary operator to display chosen podcast */}\n        {this.state.isPodcastShown ?\n\n          <div key={chosenPodcast.id} className=\"chosenPodcast\">\n            <h2>{chosenPodcast.podcast_title_original}</h2>\n                <img src={chosenPodcast.image} alt={chosenPodcast.podcast_title_original}/>\n                <p>Author: {chosenPodcast.publisher_original}</p>\n                <a href={chosenPodcast.link}>More Info</a>\n                <button>Choose</button>\n                <audio src={chosenPodcast.audio} controls/>\n          </div>\n\n        : null}\n\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}