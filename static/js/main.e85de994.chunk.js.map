{"version":3,"sources":["assets/walkingIcon.png","assets/watermelonBikeIcon.png","assets/watermelonfavicon.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","scrollToSearch","section","document","querySelector","scrollIntoView","behavior","block","toggle","event","preventDefault","state","margin","setState","handleChange","target","name","value","displayMap","from","to","map","type","axios","url","method","responseType","params","key","routeType","then","response","commuteTimeSec","data","route","realTime","commuteTimeMin","roundedTime","Math","round","isMapShown","getPodcasts","transportationType","minLen","maxLen","bicycle","pedestrian","headers","q","search","podcastGenre","genre_ids","language","len_min","len_max","results","podcasts","catch","err","console","log","displayChosenPodcast","podcast","isPodcastShown","chosenPodcast","genre","minTime","maxTime","this","mapImage","className","src","watermelonfavicon","alt","onClick","action","onSubmit","htmlFor","onChange","placeholder","required","id","watermelonBikeIcon","floor","walkingIcon","podcast_title_original","image","publisher_original","audio_length_sec","href","link","audio","controls","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e85de994.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/walkingIcon.f835e1f8.png\";","module.exports = __webpack_public_path__ + \"static/media/watermelonBikeIcon.f2c0260c.png\";","module.exports = __webpack_public_path__ + \"static/media/watermelonfavicon.0ce774d5.png\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport walkingIcon from \"./assets/walkingIcon.png\";\nimport watermelonBikeIcon from \"./assets/watermelonBikeIcon.png\";\nimport watermelonfavicon from \"./assets/watermelonfavicon.png\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      podcasts: [],\n      genre: \"\",\n      isPodcastShown: false,\n      chosenPodcast: \"\",\n      from: \"\",\n      to: \"\",\n      isMapShown: false,\n      minTime: \"\",\n      maxTime: \"\",\n      podcastGenre: \"\",\n      search: \"\",\n      margin: 40,\n    };\n  }\n\n  scrollToSearch = (section) => {\n    // event.preventDefault();\n    const searchSection = document.querySelector(section);\n    searchSection.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"start\",\n    });\n  };\n\n  toggle = (event) => {\n    event.preventDefault();\n    if (this.state.margin === 40) {\n      this.setState({\n        margin: 70,\n      });\n    } else if (this.state.margin === 70) {\n      this.setState({\n        margin: 90,\n      });\n    } else {\n      this.setState({\n        margin: 40,\n      });\n    }\n  };\n\n  //Function to update user's input to current address state\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n    // console.log(event.target.value);\n  };\n\n  //Function to display MAP and get commute time lengths for both route types\n  displayMap = (event) => {\n    event.preventDefault();\n\n    if (this.state.from !== \"\" && this.state.to !== \"\") {\n      const routeType = [\"bicycle\", \"pedestrian\"];\n      routeType.map((type) => {\n        return (\n          //Call Mapquest API to determine commute time\n          axios({\n            url: \"https://www.mapquestapi.com/directions/v2/route\",\n            method: \"GET\",\n            responseType: \"JSONP\",\n            params: {\n              key: \"EP7bQzAhNEdKJsfFtJeLQDYa3muNllNO\",\n              routeType: type,\n              from: this.state.from,\n              to: this.state.to,\n            },\n          }).then((response) => {\n            // console.log(response.data.route);\n            //get commute time in seconds\n            const commuteTimeSec = response.data.route.realTime;\n            //convert commute time to minutes\n            let commuteTimeMin = `${commuteTimeSec / 60}`;\n            let roundedTime = Math.round(commuteTimeMin);\n            this.setState({\n              isMapShown: true,\n              [type]: roundedTime,\n            });\n          })\n        );\n      });\n    }\n  };\n\n  //Function to call Poscast API\n  getPodcasts = (transportationType, section) => {\n    // commuteType is the argument from onClick funtions (choose route type section)\n    // console.log(transportationType);\n    let minLen;\n    let maxLen;\n\n    if (transportationType === \"bicycle\") {\n      //set maximum and minimum podcast lengths to call Podcasts\n\n      minLen = this.state.bicycle;\n      maxLen = Math.round(this.state.bicycle * 1.1 + 1);\n      // console.log(minLen, maxLen);\n    } else if (transportationType === \"pedestrian\") {\n      //set maximum and minimum podcast lengths to call Podcasts\n      minLen = this.state.pedestrian;\n      maxLen = Math.round(this.state.pedestrian * 1.1 + 1);\n      // console.log(minLen, maxLen);\n    }\n\n    //Call Podcast API\n    axios({\n      url: \"https://listen-api.listennotes.com/api/v2/search\",\n      method: \"GET\",\n      headers: { \"X-ListenAPI-Key\": \"ea2d65fb95fc4f59a943faa7a423b3ad\" },\n      responseType: \"JSON\",\n      params: {\n        q: this.state.search + this.state.podcastGenre,\n        genre_ids: this.state.podcastGenre,\n        type: \"episode\",\n        language: \"English\",\n        len_min: minLen,\n        len_max: maxLen,\n      },\n    })\n      .then((response) => {\n        response = response.data.results;\n        // console.log(response);\n        this.setState({\n          podcasts: response,\n        });\n      })\n      .catch((err) => {\n        console.log(err); //ERROR HANDLING NEEDED HERE!!!\n      });\n    this.scrollToSearch(section);\n  };\n\n  //----------------------------------\n  //Function to display chosen Postcast\n  displayChosenPodcast = (podcast, section) => {\n    this.setState({\n      isPodcastShown: true,\n      chosenPodcast: podcast,\n    });\n    this.scrollToSearch(section);\n  };\n\n  render() {\n    const chosenPodcast = this.state.chosenPodcast;\n    //Assign the mapUrl to a variable\n    const mapImage = `https://www.mapquestapi.com/staticmap/v5/map?start=${this.state.from}&end=${this.state.to}&size=400,200@2x&key=GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl&margin=${this.state.margin}`;\n\n    return (\n      <div className=\"App\">\n        {/* section one */}\n        <div className=\"flexContainer\">\n          <header>\n            <div className=\"wrapper\">\n              <h1>Podcast Commuter</h1>\n              <div className=\"flexContainer\">\n                <p>\n                  <img src={watermelonfavicon} alt=\"watermelon\" />\n                  Your source for juicy podcasts on the go!\n                  <img src={watermelonfavicon} alt=\"watermelon\" />\n                </p>\n              </div>\n              <ul>\n                <li>How it works:</li>\n                <li>\n                  1. enter your starting address, followed by your destination.\n                </li>\n                <li>\n                  2. search a podcast by name, or select a cateogory of podcast\n                  you're in the mood for!\n                </li>\n                <li>\n                  3. let us work some magic and populate the perfect, juiciest,\n                  most time coordinated podcast just for you and your commute!\n                </li>\n              </ul>\n              <button\n                className=\"startButton\"\n                onClick={() => this.scrollToSearch(\".background1\")}\n              >\n                Let's get started!{\" \"}\n              </button>\n            </div>\n          </header>\n        </div>\n        {/* section two */}\n        <section className=\"background1\">\n          <div className=\"wrapper\">\n            <h2>\n              Tell us your starting address, where you're headed, and pick a\n              podcast!\n            </h2>\n            <form action=\"\" onSubmit={this.displayMap}>\n              <div className=\"borderBox1\">\n                <h2>please enter your address</h2>\n                <label htmlFor=\"\">Starting Address</label>\n                <input\n                  value={this.state.from}\n                  onChange={this.handleChange}\n                  name=\"from\"\n                  type=\"text\"\n                  placeholder=\"Street number, street name, city, province\"\n                  required\n                />\n\n                <label htmlFor=\"\">Destination</label>\n                <input\n                  value={this.state.to}\n                  onChange={this.handleChange}\n                  name=\"to\"\n                  type=\"text\"\n                  placeholder=\"Street number, street name, city, province\"\n                  required\n                />\n              </div>\n              <div className=\"borderBox1\">\n                <h2>\n                  please search for a podcast by name, or choose a podcast genre{\" \"}\n                </h2>\n                <label htmlFor=\"\">Search for podcast by name</label>\n                <input\n                  value={this.state.search}\n                  onChange={this.handleChange}\n                  name=\"search\"\n                  type=\"text\"\n                  placeholder=\"Example: My Favorite Murder\"\n                />\n                <button onClick={() => this.scrollToSearch(\".background2\")}>\n                  SELECT\n                </button>\n\n                <p>OR</p>\n                <label htmlFor=\"podcastGenre\">\n                  Search for podcast by genre\n                </label>\n                <select\n                  name=\"podcastGenre\"\n                  id=\"podcastGenre\"\n                  onChange={this.handleChange}\n                >\n                  <option value=\"\">Choose a podcast genre</option>\n                  <option value=\"\">Back to search by name</option>\n                  <option value=\"144\">Personal Finance</option>\n                  <option value=\"77\">Sports</option>\n                  <option value=\"93\">Business</option>\n                  <option value=\"111\">Education</option>\n                  <option value=\"100\">Arts</option>\n                  <option value=\"132\">Kids & Family</option>\n                  <option value=\"122\">Society & Culture</option>\n                  <option value=\"133\">Comedy</option>\n                  <option value=\"168\">Fiction</option>\n                  <option value=\"117\">Government</option>\n                  <option value=\"88\">Health & Fitness</option>\n                  <option value=\"125\">History</option>\n                  <option value=\"82\">Leisure</option>\n                  <option value=\"134\">Music</option>\n                  <option value=\"99\">News</option>\n                  <option value=\"69\">Religion & Spirituality</option>\n                  <option value=\"107\">Science</option>\n                  <option value=\"68\">TV & Film</option>\n                  <option value=\"127\">Technology</option>\n                  <option value=\"135\">True Crime</option>\n                </select>\n                {/* the below button will clear the genre of podcast if user decides to change their mind and search for specific podcast instead & also clear the podcast name input field   */}\n                <button onClick={() => this.scrollToSearch(\".background2\")}>\n                  SELECT\n                </button>\n              </div>{\" \"}\n            </form>\n          </div>\n        </section>\n        {/* section 3 */}\n        <section className=\"background2\">\n          <div className=\"wrapper\">\n            <h2>Choose your method of transportion</h2>\n\n            {/* Ternary operator to display Map */}\n            {this.state.isMapShown ? (\n              <img\n                src={mapImage}\n                alt=\"Map of user commute\"\n                onClick={this.toggle}\n              />\n            ) : null}\n            <button>+</button>\n            <button>-</button>\n            <div className=\"transportationMode\">\n              <div className=\"flexContainer2\">\n                <ul>\n                  <li>\n                    {\" \"}\n                    <button\n                      onClick={() =>\n                        this.getPodcasts(\"bicycle\", \".background3\")\n                      }\n                    >\n                      <img\n                        src={watermelonBikeIcon}\n                        alt=\"Transportation via biking\"\n                      />\n                    </button>\n                  </li>\n\n                  <li>\n                    {this.state.bicycle / 60 >= 1 ? (\n                      <li>\n                        Cycling Time: {Math.floor(this.state.bicycle / 60)}\n                        hr{\" \"}\n                        {this.state.bicycle -\n                          60 * Math.floor(this.state.bicycle / 60)}\n                        mins{\" \"}\n                      </li>\n                    ) : (\n                      <li>Cycling Time: {this.state.bicycle} mins</li>\n                    )}\n                  </li>\n                </ul>\n                {/* will need to convert mins to hrs in case user's commute length is longer than 60 mins */}\n                <ul>\n                  <li>\n                    <button\n                      onClick={() =>\n                        this.getPodcasts(\"pedestrian\", \".background3\")\n                      }\n                    >\n                      <img src={walkingIcon} alt=\"Transportation via walking\" />\n                    </button>\n                  </li>\n\n                  <li>\n                    {this.state.pedestrian / 60 >= 1 ? (\n                      <li>\n                        Walking Time: {Math.floor(this.state.pedestrian / 60)}{\" \"}\n                        hr{\" \"}\n                        {this.state.pedestrian -\n                          60 * Math.floor(this.state.pedestrian / 60)}\n                        mins{\" \"}\n                      </li>\n                    ) : (\n                      <li>Walking Time: {this.state.pedestrian} mins</li>\n                    )}\n                  </li>\n                </ul>\n\n                {/* will need to convert mins to hrs in case user's commute length is longer than 60 mins */}\n                {/* <p></p> */}\n              </div>\n            </div>\n          </div>\n        </section>\n        {/* section 4 */}\n        <section className=\"background3\">\n          <div id=\"here\" className=\"wrapper\">\n            <h2>Pick your podcast!</h2>\n            <ul className=\"podcastSection\">\n              <div className=\"flexContainer3\">\n                {/* Map out the state of 'podcasts' array */}\n                {this.state.podcasts.map((podcast) => {\n                  return (\n                    <li key={podcast.id}>\n                      <h2>{podcast.podcast_title_original}</h2>\n                      <img\n                        src={podcast.image}\n                        alt={podcast.podcast_title_original}\n                      />\n                      <div className=\"flexContainer\">\n                        <p>Author: {podcast.publisher_original}</p>\n                        {podcast.audio_length_sec / 60 / 60 >= 1 ? (\n                          <p>\n                            Time:{\" \"}\n                            {Math.floor(podcast.audio_length_sec / 60 / 60)} hr{\" \"}\n                            {Math.round(podcast.audio_length_sec / 60) -\n                              60 *\n                                Math.floor(\n                                  podcast.audio_length_sec / 60 / 60\n                                )}{\" \"}\n                            mins\n                          </p>\n                        ) : (\n                          <p>\n                            Time: {Math.round(podcast.audio_length_sec / 60)}{\" \"}\n                            mins\n                          </p>\n                        )}\n                        <a href={podcast.link}>More Info</a>\n                        <button\n                          onClick={() =>\n                            this.displayChosenPodcast(\n                              podcast,\n                              \".chosenPodcastSection\"\n                            )\n                          }\n                        >\n                          Choose\n                        </button>\n                      </div>\n                    </li>\n                  );\n                })}\n              </div>\n            </ul>\n            {/* Ternary operator to display chosen podcast */}\n          </div>\n          {/* section 5 */}\n          <section className=\"chosenPodcastSection wrapper\">\n            <h2>Audio Player</h2>\n            {this.state.isPodcastShown ? (\n              <div key={chosenPodcast.id} className=\"chosenPodcast\">\n                <h2>{chosenPodcast.podcast_title_original}</h2>\n                <div className=\"flexContainer2\">\n                  <img\n                    src={chosenPodcast.image}\n                    alt={chosenPodcast.podcast_title_original}\n                  />\n                  <div className=\"flexContainer\">\n                    <p>Author: {chosenPodcast.publisher_original}</p>\n                    <a href={chosenPodcast.link}>More Information</a>\n                    <audio src={chosenPodcast.audio} controls />\n                  </div>\n                </div>\n              </div>\n            ) : null}\n          </section>\n        </section>\n        <footer>\n          <p>\n            this juicy app was created during a not so juicy time in 2020 by\n            Cliff, Victor, Anh, and Ro\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}