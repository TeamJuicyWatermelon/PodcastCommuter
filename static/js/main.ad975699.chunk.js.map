{"version":3,"sources":["assets/walkingIcon.png","assets/watermelonBikeIcon.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","state","from","to","axios","url","method","responseType","params","key","routeType","then","response","commuteTimeSec","data","route","realTime","commuteTimeMin","roundedTime","Math","round","min","max","console","log","isMapShown","minTime","maxTime","headers","q","type","language","len_min","len_max","results","podcasts","displayChosenPodcast","podcast","isPodcastShown","chosenPodcast","userTyping","genre","this","mapImage","className","action","htmlFor","onChange","placeholder","id","disable","onClick","src","alt","href","watermelonBikeIcon","walkingIcon","map","podcast_title_original","image","publisher_original","link","audio","controls","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,gD,uOCoQ5BC,E,kDA9Pb,aAAe,IAAD,8BACZ,gBAmDHC,aAAe,SAACC,GAEf,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAvDtB,EA4DhBC,aAAe,SAACL,GACdA,EAAMM,iBACkB,KAApB,EAAKC,MAAMC,MAAiC,KAAlB,EAAKD,MAAME,KACvCC,IAAM,CACJC,IAAK,iDACLC,OAAQ,MACRC,aAAc,QACdC,OAAQ,CACNC,IAAK,mCACLC,UAAW,aACXR,KAAM,EAAKD,MAAMC,KACjBC,GAAI,EAAKF,MAAME,MAEhBQ,MAAK,SAACC,GACP,IAAMC,EAAiBD,EAASE,KAAKC,MAAMC,SACvCC,EAAc,UAAKJ,EAAiB,IAClCK,EAAcC,KAAKC,MAAMH,GAGzBI,EAAMH,EAAc,EACpBI,EAAMJ,EAAc,EAC1BK,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZ,EAAK3B,SAAS,CACZ8B,YAAY,EACZC,QAASL,EACTM,QAASL,OAKbC,QAAQC,IAAI,EAAKvB,MAAM0B,SAEvBvB,IAAM,CACJC,IAAK,mDACLC,OAAQ,MACRsB,QAAS,CAAE,kBAAmB,oCAC9BrB,aAAc,OACdC,OAAQ,CACNqB,EAAG,UACHC,KAAM,UACNC,SAAU,UACVC,QAAQ,EAAK/B,MAAMyB,QACnBO,QAAS,EAAKhC,MAAM0B,WAErBhB,MAAK,SAACC,GACPA,EAAWA,EAASE,KAAKoB,QACzB,EAAKvC,SAAS,CACZwC,SAAUvB,SA5GF,EAmHhBwB,qBAAuB,SAACC,GAEpB,EAAK1C,SAAS,CACZ2C,gBAAgB,EAChBC,cAAeF,KArHjB,EAAKpC,MAAQ,CACXuC,WAAY,GACZL,SAAU,GACVM,MAAO,GACPH,gBAAgB,EAChBC,cAAe,GACfrC,KAAM,GACNC,GAAI,GACJsB,YAAY,EACZf,UAAW,GACXgB,QAAS,GACTC,QAAS,IAbC,E,qDA2HJ,IAAD,OACDY,EAAgBG,KAAKzC,MAAMsC,cAE3BI,EAAQ,6DAAyDD,KAAKzC,MAAMC,KAApE,gBAAgFwC,KAAKzC,MAAME,GAA3F,yDACd,OACE,yBAAKyC,UAAU,OACb,yBAAKA,UAAU,iBACb,gCACE,yBAAKA,UAAU,WACb,gDACA,wEACA,4BACE,6CACA,wFAGA,6FAGA,0JAKF,0DAaN,6BAASA,UAAU,eACjB,yBAAKA,UAAU,WACb,uGAIA,0BAAMC,OAAO,IACX,2BAAOC,QAAQ,IAAf,oBACA,2BACAhD,MAAO4C,KAAKzC,MAAMC,KAClB6C,SAAUL,KAAKjD,aACfI,KAAK,OACLiC,KAAK,OACLkB,YAAY,8BAEZ,2BAAOF,QAAQ,IAAf,eACA,2BACAhD,MAAO4C,KAAKzC,MAAME,GAClB4C,SAAUL,KAAKjD,aACfI,KAAK,KACLiC,KAAK,OACLkB,YAAY,8BAEZ,2BAAOF,QAAQ,IAAf,iBACA,4BAAQjD,KAAK,GAAGoD,GAAG,IACjB,4BAAQC,SAAO,EAACpD,MAAM,IAAtB,+BAIF,4BAAQqD,QAAST,KAAK3C,cAAtB,gBAKN,6BAAS6C,UAAU,eACjB,yBAAKA,UAAU,WACb,gHAMDF,KAAKzC,MAAMwB,WACZ,yBAAK2B,IAAKT,EAAUU,IAAI,UACtB,KAGA,yBAAKT,UAAU,sBACb,uBAAGU,KAAK,SACN,yBAAKF,IAAKG,IAAoBF,IAAI,+BAEpC,uBAAGC,KAAK,SACN,yBAAKF,IAAKI,IAAaH,IAAI,mCAMnC,6BAAST,UAAU,eACjB,yBAAKK,GAAG,OAAOL,UAAU,WACvB,kDACA,wBAAIA,UAAU,kBACfF,KAAKzC,MAAMkC,SAASsB,KAAI,SAAApB,GACvB,OACE,wBAAI5B,IAAK4B,EAAQY,IACf,4BAAKZ,EAAQqB,wBACb,yBAAKN,IAAKf,EAAQsB,MAAON,IAAKhB,EAAQqB,yBACtC,sCAAYrB,EAAQuB,oBACpB,uBAAGN,KAAMjB,EAAQwB,MAAjB,aACA,4BAAQV,QAAS,kBAAM,EAAKf,qBAAqBC,KAAjD,eAMPK,KAAKzC,MAAMqC,eAEV,yBAAK7B,IAAK8B,EAAcU,GAAIL,UAAU,iBACpC,4BAAKL,EAAcmB,wBACf,yBAAKN,IAAKb,EAAcoB,MAAON,IAAKd,EAAcmB,yBAClD,sCAAYnB,EAAcqB,oBAC1B,uBAAGN,KAAMf,EAAcsB,MAAvB,aACA,0CACA,2BAAOT,IAAKb,EAAcuB,MAAOC,UAAQ,KAG/C,Y,GAvPQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlE,MAAK,SAAAmE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.ad975699.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/walkingIcon.f835e1f8.png\";","module.exports = __webpack_public_path__ + \"static/media/watermelonBikeIcon.f2c0260c.png\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport walkingIcon from \"./assets/walkingIcon.png\";\nimport watermelonBikeIcon from \"./assets/watermelonBikeIcon.png\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userTyping: '',\n      podcasts: [],\n      genre: '',\n      isPodcastShown: false,\n      chosenPodcast: '',\n      from: '',\n      to: '',\n      isMapShown: false,\n      routeType: '',\n      minTime: '',\n      maxTime: '',\n    };\n  }\n\n  // componentDidMount() {\n  //   /* Map API */\n  //   axios({\n  //     url: \"http://www.mapquestapi.com/directions/v2/route\",\n  //     method: \"GET\",\n  //     responseType: \"JSONP\",\n  //     params: {\n  //       key: \"EP7bQzAhNEdKJsfFtJeLQDYa3muNllNO\",\n  //       from: \"483 Queen St W, Toronto, ON\",\n  //       to: \"152 Spadina Av, Toronto, ON\",\n  //     },\n  //   }).then((response) => {\n  //     console.log(response);\n  //   });\n\n  //   axios({\n  //     /* Podcast API */\n  //     url: \"https://listen-api.listennotes.com/api/v2/search\",\n  //     method: \"GET\",\n  //     headers: { \"X-ListenAPI-Key\": \"efedd950b2d84805a5c9ede9b4543e23\" },\n  //     responseType: \"JSON\",\n  //     params: {\n  //       q: \"Personal Finance\",\n  //       type: \"episode\",\n  //       language: \"English\",\n  //     },\n  //   }).then((response) => {\n  //     console.log(response);\n  //     this.setState({\n  //       podCast: response.data.results[0],\n  //     });\n  //   });\n  // }\n\n  //Function to update user's keystroke to current state\n handleChange = (event) => {\n  //  event.preventDefault();\n  this.setState({\n    [event.target.name]: event.target.value,\n  })\n}\n\n//Function to make the Direction API call\nhandleSubmit = (event) => {\n  event.preventDefault();\n  if (this.state.from !== '' && this.state.to !== '') {\n    axios({\n      url: 'http://www.mapquestapi.com/directions/v2/route',\n      method: 'GET',\n      responseType: 'JSONP',\n      params: {\n        key: 'EP7bQzAhNEdKJsfFtJeLQDYa3muNllNO',\n        routeType: 'pedestrian',\n        from: this.state.from,\n        to: this.state.to,\n      }\n    }).then((response) => {\n      const commuteTimeSec = response.data.route.realTime;\n      let commuteTimeMin =`${commuteTimeSec / 60}`;\n      const roundedTime = Math.round(commuteTimeMin);\n      // console.log(roundedTime);\n      \n      const min = roundedTime - 1;\n      const max = roundedTime + 1;\n      console.log(min);\n      console.log(max);\n      this.setState({\n        isMapShown: true,\n        minTime: min,\n        maxTime: max,\n      })\n    })\n\n    \n    console.log(this.state.maxTime);\n\n    axios({\n      url: 'https://listen-api.listennotes.com/api/v2/search',\n      method: 'GET',\n      headers: { 'X-ListenAPI-Key': 'ea2d65fb95fc4f59a943faa7a423b3ad' },\n      responseType: 'JSON',\n      params: {\n        q: 'general', //this.state.genre  here\n        type: \"episode\",\n        language: \"English\",\n        len_min:this.state.minTime, //this.state.commuteTime  here\n        len_max: this.state.maxTime, //this.state.commuteTime here\n      }\n    }).then((response) => {\n      response = response.data.results;\n      this.setState({\n        podcasts: response,\n      })\n    }) \n  }\n}\n//----------------------------------\n//Function to display chosen Postcast\ndisplayChosenPodcast = (podcast) => {\n  // console.log(podcast);\n    this.setState({\n      isPodcastShown: true,\n      chosenPodcast: podcast,\n    })\n  }\n\n  render() {\n    const chosenPodcast = this.state.chosenPodcast;\n    //Assign the mapUrl to a variable\n    const mapImage = `https://www.mapquestapi.com/staticmap/v5/map?start=${this.state.from}&end=${this.state.to}&size=400,200@2x&key=GjfNgstNA6zUKUgGcbkAzOwhHGvwyPRl`;\n    return (\n      <div className=\"App\">\n        <div className=\"flexContainer\">\n          <header>\n            <div className=\"wrapper\">\n              <h1>Podcast Commuter</h1>\n              <p>Your source for juicy podcasts on the go!</p>\n              <ul>\n                <li>How it works:</li>\n                <li>\n                  1. select a cateogory of podcast you're in the mood for!\n                </li>\n                <li>\n                  2. enter your starting address, followed by your destination.\n                </li>\n                <li>\n                  3. let us work some magic and populate the perfect, juciest,\n                  most time coordinated podcast just for you and your commute!\n                </li>\n              </ul>\n              <button>Let's get started! </button>\n              {/* the below can go into a component (renders title, link, and image of podcast) */}\n              {/* <div className=\"podcast\">\n                <a href={this.state.podCast.audio}>\n                  {\" \"}\n                  <h2>{this.state.podCast.podcast_title_original}</h2>\n                  <img src={this.state.podCast.image} />\n                </a>\n              </div> */}\n              {/* the above can go into a component */}\n            </div>\n          </header>\n        </div>\n        <section className=\"background1\">\n          <div className=\"wrapper\">\n            <h2>\n              Tell us your starting address, where you're headed, and pick a\n              podcast!\n            </h2>\n            <form action=\"\">\n              <label htmlFor=\"\">Starting Address</label>\n              <input\n              value={this.state.from} \n              onChange={this.handleChange}\n              name=\"from\"\n              type=\"text\" \n              placeholder=\"Street, city, postal code\" />\n\n              <label htmlFor=\"\">Destination</label>\n              <input \n              value={this.state.to}\n              onChange={this.handleChange}\n              name=\"to\"\n              type=\"text\" \n              placeholder=\"Street, city, postal code\" />\n\n              <label htmlFor=\"\">Podcast genre</label>\n              <select name=\"\" id=\"\">\n                <option disable value=\"\">\n                  Choose a podcast category!\n                </option>\n              </select>\n              <button onClick={this.handleSubmit}>LET'S GO!</button>\n            </form>\n          </div>\n        </section>\n        {/* part 3 */}\n        <section className=\"background2\">\n          <div className=\"wrapper\">\n            <h2>\n              Choose your method of transportion, and we will show you your\n              route and podcast!\n            </h2>\n\n            {/* Ternary operator to display Map */}\n          {this.state.isMapShown ? \n          <img src={mapImage} alt=\"hello\"/>\n          : null\n          }\n\n            <div className=\"transportationMode\">\n              <a href=\"#here\">\n                <img src={watermelonBikeIcon} alt=\"Transportation via biking\" />\n              </a>\n              <a href=\"#here\">\n                <img src={walkingIcon} alt=\"Transportation via walking\" />\n              </a>\n            </div>\n          </div>\n        </section>\n        {/* part 4 */}\n        <section className=\"background3\">\n          <div id=\"here\" className=\"wrapper\">\n            <h2>Pick your podcast!</h2>\n            <ul className=\"podcastSection\">\n          {this.state.podcasts.map(podcast => {\n            return (\n              <li key={podcast.id}>\n                <h2>{podcast.podcast_title_original}</h2>\n                <img src={podcast.image} alt={podcast.podcast_title_original}/>\n                <p>Author: {podcast.publisher_original}</p>\n                <a href={podcast.link}>More Info</a>\n                <button onClick={() => this.displayChosenPodcast(podcast)}>Choose</button>\n              </li>\n            )\n          })}\n        </ul>\n        {/* Ternary operator to display chosen podcast */}\n        {this.state.isPodcastShown ?\n\n          <div key={chosenPodcast.id} className=\"chosenPodcast\">\n            <h2>{chosenPodcast.podcast_title_original}</h2>\n                <img src={chosenPodcast.image} alt={chosenPodcast.podcast_title_original}/>\n                <p>Author: {chosenPodcast.publisher_original}</p>\n                <a href={chosenPodcast.link}>More Info</a>\n                <button>Choose</button>\n                <audio src={chosenPodcast.audio} controls/>\n          </div>\n\n        : null}\n\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}